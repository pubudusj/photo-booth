service: photo-booth

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

custom:
  stateMachineName: 'photoBoothStepMachine'
  signedUrlExpiredSeconds: ${opt:signedUrlExpiredSeconds, 432000 }

package:
  individually: true

functions:
  createSignedUrl:
    handler: src/createSignedUrl/handler.index
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - s3:PutObject
        Resource:
          - !Join
            - ''
            - - !GetAtt S3Bucket.Arn
              - '/uploads/*'
    events:
      - http:
          path: /upload
          method: post
          cors: true
    environment:
      bucketName: !Ref S3Bucket
      signedUrlExpiredSeconds: ${self:custom.signedUrlExpiredSeconds}
    optimize: false

  init:
    handler: src/init/handler.index
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - states:StartExecution
        Resource: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${self:custom.stateMachineName}'
    events:
      - s3:
          bucket: !Ref S3Bucket
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: uploads/
            - suffix: .jpg
    environment:
      stateMachine: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${self:custom.stateMachineName}'

  removeBackground:
    handler: src/removeBackground/handler.index
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - s3:GetObject
        Resource:
          - !Join
            - ''
            - - !GetAtt S3Bucket.Arn
              - '/uploads/*'
      - Effect: "Allow"
        Action: 
          - s3:PutObject
        Resource:
          - !Join
            - ''
            - - !GetAtt S3Bucket.Arn
              - '/background_removed/*'
    environment:
      removeBgApiKey: ${env:REMOVE_BG_API_KEY}

  addNewBackground:
    handler: src/addNewBackground/handler.index
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - s3:GetObject
        Resource:
          - !Join
            - ''
            - - !GetAtt S3Bucket.Arn
              - '/background_removed/*'
      - Effect: "Allow"
        Action: 
          - s3:GetObject
        Resource:
          - !Join
            - ''
            - - !GetAtt S3Bucket.Arn
              - '/backgrounds/*'
      - Effect: "Allow"
        Action: 
          - s3:PutObject
        Resource:
          - !Join
            - ''
            - - !GetAtt S3Bucket.Arn
              - '/new_background/*'
    environment:
      noOfBackgroundImages: ${env:TOTAL_BACKGROUNDS}

  addWatermark:
    handler: src/addWatermark/handler.index
    optimize:
      external: ['jimp']
      externalPaths:
        jimp: 'jimp-external/jimp'
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - s3:GetObject
        Resource:
          - !Join
            - ''
            - - !GetAtt S3Bucket.Arn
              - '/new_background/*'
      - Effect: "Allow"
        Action: 
          - s3:PutObject
        Resource:
          - !Join
            - ''
            - - !GetAtt S3Bucket.Arn
              - '/final/*'

  sendEmail:
    handler: src/sendEmail/handler.index
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - s3:GetObject
        Resource:
          - !Join
            - ''
            - - !GetAtt S3Bucket.Arn
              - '/final/*'
      - Effect: "Allow"
        Action: 
          - SES:SendRawEmail
        Resource: '*'
        Condition:
          StringEquals:
            ses:FromAddress:
              - ${env:SES_FROM_ADDRESS}
    environment:
      sesFromAddress: ${env:SES_FROM_ADDRESS}

stepFunctions:
  stateMachines:
    photoBoothStepMachine:
      name: ${self:custom.stateMachineName}
      definition:
        Comment: "State machine for Photo Booth service."
        StartAt: RemoveBackground
        States:
          RemoveBackground:
            Type: Task
            Resource:
              Fn::GetAtt: [removeBackground, Arn]
            Next: AddNewBackground
          AddNewBackground:
            Type: Task
            Resource:
              Fn::GetAtt: [addNewBackground, Arn]
            Next: AddWatermark
          AddWatermark:
            Type: Task
            Resource:
              Fn::GetAtt: [addWatermark, Arn]
            Next: SendEmail
          SendEmail:
            Type: Task
            Resource:
              Fn::GetAtt: [sendEmail, Arn]
            End: true

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub 'photo-booth-${self:provider.stage}-${AWS::AccountId}-${AWS::Region}'
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - "PUT"
              AllowedHeaders:
                - "X-Forwarded-For"
                - "x-amz-meta-user"
              AllowedOrigins:
                - '*'
              MaxAge: 60
  Outputs:
    S3BucketName:
      Value:
        !Ref S3Bucket

plugins:
  - serverless-step-functions
  - serverless-iam-roles-per-function
  - serverless-plugin-optimize